// Code generated by MockGen. DO NOT EDIT.
// Source: kvManager/internal/storage (interfaces: KvRepository)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/storage_mock.go -package=mocks . KvRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKvRepository is a mock of KvRepository interface.
type MockKvRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKvRepositoryMockRecorder
	isgomock struct{}
}

// MockKvRepositoryMockRecorder is the mock recorder for MockKvRepository.
type MockKvRepositoryMockRecorder struct {
	mock *MockKvRepository
}

// NewMockKvRepository creates a new mock instance.
func NewMockKvRepository(ctrl *gomock.Controller) *MockKvRepository {
	mock := &MockKvRepository{ctrl: ctrl}
	mock.recorder = &MockKvRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKvRepository) EXPECT() *MockKvRepositoryMockRecorder {
	return m.recorder
}

// AddValue mocks base method.
func (m *MockKvRepository) AddValue(key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddValue", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddValue indicates an expected call of AddValue.
func (mr *MockKvRepositoryMockRecorder) AddValue(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddValue", reflect.TypeOf((*MockKvRepository)(nil).AddValue), key, value)
}

// DeleteValue mocks base method.
func (m *MockKvRepository) DeleteValue(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteValue", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteValue indicates an expected call of DeleteValue.
func (mr *MockKvRepositoryMockRecorder) DeleteValue(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteValue", reflect.TypeOf((*MockKvRepository)(nil).DeleteValue), key)
}

// GetValue mocks base method.
func (m *MockKvRepository) GetValue(key string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", key)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockKvRepositoryMockRecorder) GetValue(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockKvRepository)(nil).GetValue), key)
}

// UpdateValue mocks base method.
func (m *MockKvRepository) UpdateValue(key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateValue", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateValue indicates an expected call of UpdateValue.
func (mr *MockKvRepositoryMockRecorder) UpdateValue(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateValue", reflect.TypeOf((*MockKvRepository)(nil).UpdateValue), key, value)
}
